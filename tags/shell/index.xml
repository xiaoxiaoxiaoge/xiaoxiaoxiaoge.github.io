<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on Hddata</title>
    <link>https://xiaoxiaoxiaoge.github.io/tags/shell/</link>
    <description>Recent content in shell on Hddata</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Sun, 08 Sep 2019 11:18:15 +0800</lastBuildDate><atom:link href="https://xiaoxiaoxiaoge.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>shell的字符串截取</title>
      <link>https://xiaoxiaoxiaoge.github.io/post/strings/</link>
      <pubDate>Sun, 08 Sep 2019 11:18:15 +0800</pubDate>
      
      <guid>https://xiaoxiaoxiaoge.github.io/post/strings/</guid>
      <description>shell的字符串截取 目标   掌握常用的字符串截取操作   CUT 简单粗暴，直接指定结束位置和开始位置
114.70 : ➜ ~ ME=scguo 114.70 : ➜ ~ echo $ME |cut -c 2-4 cgu 变量截取 删除左边字符 删除从左开始到第一个分隔符 ${line#*=} 其中 line 是变量名，# 号是运算符，*= 表示从左边开始删除第一个 = 号及左边的所有字符 114.70 : ➜ ~ line=&amp;#34;2018-01-01 00:00:00=endDate=2018-01-31 23:59:59&amp;#34; 114.70 : ➜ ~ echo ${line#*=} endDate=2018-01-31 23:59:59 删除从左开始到最后一个分隔符 startDate=${line##*=} 其中 line 是变量名，## 是运算符，*= 表示从左边开始删除最后（最右边）一个 = 号及左边的所有字符 114.70 : ➜ ~ line=&amp;#34;2018-01-01 00:00:00=endDate=2018-01-31 23:59:59&amp;#34; 114.70 : ➜ ~ echo ${line##*=} 2018-01-31 23:59:59 删除右边字符 删除从右开始到第一个分隔符 startDate=${line%=*} 其中 line 是变量名，% 是运算符，=* 表示从右边开始，删除第一个 = 号及右边的字符 114.</description>
    </item>
    
    <item>
      <title>终极 Shell----zsh</title>
      <link>https://xiaoxiaoxiaoge.github.io/post/zsh/</link>
      <pubDate>Sun, 08 Sep 2019 11:18:15 +0800</pubDate>
      
      <guid>https://xiaoxiaoxiaoge.github.io/post/zsh/</guid>
      <description>终极 Shell&amp;mdash;-zsh 解决的问题   色彩高亮； 命令提示； 智能补全； 智能跳转；   zsh介绍与安装 Shell是Linux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。
Linux/Unix提供了很多种Shell，为毛要这么多Shell？那我问你，你同类型的衣服怎么有那么多件？花色，质地还不一样。写程序比买衣服复杂多了，而且程序员往往负责把复杂的事情搞简单，简单的事情搞复杂。牛程序员看到不爽的Shell，就会自己重新写一套，慢慢形成了一些标准，常用的Shell有这么几种，sh、bash、csh等，想知道你的系统有几种shell，可以通过以下命令查看：
cat /etc/shells 显示如下：
# List of acceptable shells for chpass(1). # Ftpd will not allow users to connect who are not using # one of these shells.  /bin/bash /bin/csh /bin/ksh /bin/sh /bin/tcsh /bin/zsh zsh的功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash， 于是他创建了一个名为oh-my-zsh的开源项目，自此，只需要简单的安装配置，小白程序员们都可以用上高档大气上档次，狂拽炫酷吊炸天的oh my zsh。
安装 参考文档-https://github.com/robbyrussell/oh-my-zsh
插件配置 编辑用户目录下的.zshrc文件
plugins=(adb autojump brew docker extract git go golang helm history httpie kubectl man node npm osx pip sublime svn z zsh-syntax-highlighting zsh-autosuggestions) 使用说明 色彩高亮   成功的命令是绿色； 错误的命令是红色； 会提示上一个命令是否执行成功；   命令提示 输入命令后，按两次tab可以查看命令支持的所有参数；</description>
    </item>
    
    <item>
      <title>命令片段</title>
      <link>https://xiaoxiaoxiaoge.github.io/post/gist/</link>
      <pubDate>Wed, 04 Sep 2019 11:18:15 +0800</pubDate>
      
      <guid>https://xiaoxiaoxiaoge.github.io/post/gist/</guid>
      <description>命令片段 kill name ps -ef |grep java |grep -v grep |cut -c 9-15 |xarge kill - 15 ps -ef |grep vim |grep -v grep |awk &amp;#39;{print $2}&amp;#39; |xargs kill -15 循环 # 循环一定次数 for (( i=1; i&amp;lt;= 10000; i++ )); do echo `date`; sleep 1 ; done # 遍历文件夹下所有文件执行某操作 for file in ./pcm/* ; do echo pcmtowav -in $file -out wav/$file.wav ; done # 遍历文件的每一行内容 while read LINE; do echo $LINE; done &amp;lt; result.</description>
    </item>
    
  </channel>
</rss>
